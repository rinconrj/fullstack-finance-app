generator client {
    provider = "prisma-client-js"
    previewFeatures = []
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    email         String   @unique
    provider      String
    accounts      Account[]
    sessions      Session[]
    transactions  Transaction[]
    bankAccounts  BankAccount[]
    creditCards   CreditCard[]
    credits       Credit[]
    payments      Payments[]
}

model VerificationToken {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// transaction model

model Transaction {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    account String
    amount String
    category String
    date String
    description String
    userId String @db.ObjectId
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccount {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    name String
    type String
    balance Float
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditCard {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    name String
    type String
    balance Float
    paymentDate DateTime
    monthlyPaymentValue Float
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credit {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    name String
    type String
    balance Float
    paymentDate DateTime
    monthlyPaymentValue Float
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payments {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    name String
    type String
    paymentDate DateTime
    monthlyPaymentValue Float
    recurrent Boolean
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    }